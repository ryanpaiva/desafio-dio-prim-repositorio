
HTML 1 - 1992
HTML 2 - 1995
HTML 3 - 1997
HTML 4 - 1997
HTML 5 - 2014

ESTRUTURA BÁSICA

<!DOCTYPE html>
<html>
 <head>
  <meta>
  <title></title>
 </head>
 <body>
 </body>
</html>

----------------------------------------------------------

Semântica

<section> <aside>

<header> <footer>

<article> <h1-h6>

<h1> título da página </h1>
<h2> título da seção </h2>
<h3> Título de artigo </h3>
<p> Contéudo do artigo. </p>

<a>Link</a>
<a href="instagram.com/perfil">Instagram</a>
<a href="maito:email@email.com">E-mail</a>
<a target="_blank_>Link</a>

--------------------------------------------------------

Imagens

<img>
<img src="img/avatar.jgp">
<img alt="descrição da foto">

--------------------------------------------------------

CSS3
 
INTRODUÇÃO AO CSS3

seletores
a, p, h1, h3 {
   color: blue;
   font-size: 14px;
}

declarações

--------------------------------------------------------

ID x Classe

<header id="header" class="header"></header>

<header class="header"></header>
--------------------------------------------------------

.header {
    padding: 10px;
}                  ID
--------------------------------------------------------
#header {
    padding: 15px;
}                 CLASS
--------------------------------------------------------
ID SÓ PODE SER USADO UMA VEZ NA PÁGINA
--------------------------------------------------------
box model

margin
 border
  padding
   content

--------------------------------------------------------

background-image: url("bgb.png");
backgrounf-position: top;
background-color: green;

--------------------------------------------------------

border: 3px solid blue;
border-top: 2pc dotted green;
border-right: 4pc dashed pink;
--------------------------------------------------------

ESTILIZAÇÃOA DE LISTA

ul {
  list-style-type: square;
}

ol{
 upper-roman
}

ul {
: "\1f44d";
}

list-style-image: url("rocket.png");

--------------------------------------------------------

width - largura
height - altura

max-widht - largura maxima
mas-height - altura maxima

margin - alinhamento

text align - alinhamento de texto

--------------------------------------------------------

CSS FLEXBOX

flex container - "display:flex" - transforma todos os itens filhos em flex itens
display                 justify-content
flex-direction          align-itens
flex-wrap               align-content
flex-flow

FLEX ITEM
são os elementos filhos diretos do flex container. e tbm podem se tornar flex container
flex-grow       flex
flax-basis      order
flex-shrink     align-self

--------------------------------------------------------

FUNDAMENTOS DO FLEXBOX

ESTRUTURA BÁSICA DO DISPLAY-FLEX

--------------------------------------------------------

TIPOS FUNÇÃO JS 

ESTRUTURA

definição comum de uma função

function nome(parametros) {
   //instruções
}
return; //valor de retorno

variáveis criadas dentro de uma função apenas podem ser utilizadas dentro dela.
Quando invocamos o "return", a função para de ser executada.
--------------------------------------------------------

FUNÇÃO ANÔNIMA

FUNÇÕES QUE REPRESENTAM EXPRESSÊS

cosnt soma = function (a, b) {
  return a + b;
}

soma(1, 2) //3
soma(5, 4) //9

uma variável pode armazer uma função

--------------------------------------------------------

FUNÇÃO AUTOINVOCÁVEL
IIFE (IMMEDIATELY INVOKED FUNCTION EXPRESSION)

(
  function () {
    let name = "frase"
    return name:
  }
)();

//frase

uma função anônima entre parênteses, seguida por outro par de parênteses. que representa sua chamada.


(
  function(a, b) {
    return a + b;
  }
)(1, 2);

//3

também pode ser utilizada com parametros ou armazenada em uma variavel

const soma3 = (
  function() {
    return a + b;
  }
)(1, 2);

console.log(soma3) //3

--------------------------------------------------------

CALLBACKS

UMA FUNÇÃO PASSADA COMO ARGUMENTO PARA OUTRA

ULTILIZANDO CALLBACKS, VC TEM MAIOR CONTROLE DA ORDEM DE CHAMADAS

--------------------------------------------------------

ARGUMENTS

function findMax() {
  let max = -Infinity;

  for (let i = 0; i < arguments.length; i++) {
    if (arguments[i] > max) {
      max = arguments[i];
    }
  }

  return max;
}

Um array com todos os parametros passados quando a função foi invocada
--------------------------------------------------------

ARRAYS

SPREAD: UMA FORMA DE LIDAR SEPARADAMENTE COM ELEMENTOS

O QUE ERA PARTE DE UM AEEAY SE TORNA UM ELEMENTO INDEPENDENTE

function sum(x, y, z) {
  return x + y + z;
}

const numbers = [1, 2, 3];

console.log(sum(...numbers));

--------------------------------------------------------

REST: COMBINA OS ARGUMENTOS EM UM ARRAYS

O QUE ERA UM ELEMENTO INDEPENDENTE SE TORNA PARTE DE UM ARRAY.

function confereTamanho(...args) {
  console.log(args.length)
}

confereTamanho() //0
confereTamanho(1, 2) //2
confereTamanho(3, 4, 5) //3

--------------------------------------------------------

OBJETOS

OBJECT DESTRUCTURING

ENTRE CHAVES {}, PODEMOS FILTRAS APENAS OS DADOS QUE NOS INTERESSAM EM UM OBJETO.

const user = {
  id: 42,
  displayName: 'jdoe',
  fullName: {
    firstName: 'John',
    lastName: 'Doe'
  }
};

function userID({id}) {
  return id;
}

function getFullName({fullName: {firstName: first, lastName: last}}) {
  return `${first} ${last}`;
}

userId(user)
//42

getFullName(user)
// John Doe

--------------------------------------------------------

LOOPS

IF/ELSE

function numeroPositivo(num) {
  let resultado;

  if(num < 0) {           //CONDIÇÃO
    resultado = false;    //DECLARAÇÃO 1(DENTRO DE IF): OCORRE CASO A CONDIÇÃO SEJA VERDADEIRA
  } else {
    resultado = true;     //DECLARAÇÃP 2(DENTRO DE ELSE): OCORRE CASO A CONDIÇÃO SEJA FALSA
  }

  return resultado;
}

numeroPositivo(2)
//true

numeroPositivo(-9)
//false

--------------------------------------------------------

SWITCH/CASE

function getAnimal(id) {
  switch(id) {
    case 1:
      return "cão";
    case 2:
      return "gato";
    case 3:
      return "passáro";
    default:
      return "peixe";
  }
}

getAnimal(1) //cão
getAnimal(4) //peixe
getAnimal("1") //peixe

-EQUIVALE A UMA COMPARAÇÃO DE TIPO E VALOR (===)
-SEMPRE PRECISA DE UM VALOR "default"
-IDEAL PARA QUANDO SE PRECISA COMPRAR MUITOS VALORES

--------------------------------------------------------

FOR

LOOP DENTRO DE ELEMENTOS ITERAVEIS (ARRAYS, STRINGS)

function multiplicaPorDois(arr) {
  let multiplicados = [];

  for(let i = 0; i < arr.length; i++) {
    multiplicados.push(arr[i] * 2);
  }

  return multiplicados;
}

const meusNumeros = [2, 33, 456, 356, 40];

multiplicaPorDois(meusNumeros);
// [4, 66, 912, 712, 80]

--------------------------------------------------------

WHILE

function exemploWhile() {
  let num = 0;

  while(num <= 5){
    console.log(num);
    num++;
  }
}

exemploWhile()
//0
//1
//2
//3
//4
//5

EXECUTA INSTRUÇÕES ATÉ QUE A CONDIÇÃO SE TORNE FALSE

--------------------------------------------------------

DO...WHILE
function exemploDoWhile() {
  let num = 0;

  do {
    console.log(num);
    num++;
  } while(num <=5)
}

exemploDoWhile()
//0
//1
//2
//3
//4
//5

EXECUTA INSTRUÇÕES ATÉ QUE A CONDIÇÃO SE TORNE FALSA.

PORÉM A PRIMEIRA EXECUÇÃO SEMPRE OCORRE

function exemploWhile() {
  let num = 6;

  while(num <= 5){
    console.log(num);
    num++;
  }
}

exemploDoWhile()
//6

--------------------------------------------------------

THIS

A PALAVRA RESERVADA THIS É UMA REFERENCIA DE CONTEXTO
NO EXEMPLO, THIS REFERE-SE AO OBJETO PESSOA

const pessoa = {
  firstName: "André",
  lastName: "Silva",
  id: 1,
  fullName: function() {
    return this.firstName + " " + this.lastName;
  },
  getId: function() {
    return this.id;
  }
};

pessoa.fullName();

//"André Silva"

pessoa.getId();
//1